package com.poc.cache;

import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.interceptor.KeyGenerator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.lang.reflect.Method;
import java.util.Arrays;

/**
 * https://springframework.guru/using-ehcache-3-in-spring-boot/
 * To enable caching support in Spring Boot, we need a simple configuration class that must be annotated with @EnableCaching.
 * Up to this point, we donâ€™t need to do anything more as the following code shows:
 * {@see PageRepository}
 */
@Configuration
@EnableCaching
public class EhcacheConfig {

/*    @Bean
    public CacheManager cacheManager() {
        SimpleCacheManager cacheManager = new SimpleCacheManager();
        Cache adminUserPagesCache = new ConcurrentMapCache("ADMIN_USER_CACHE");
        cacheManager.setCaches(Arrays.asList(adminUserPagesCache));
        return cacheManager;
    }*/


    /**
     * purpose of this bean is for autogenerated key name
     * example of use on @Cacheable annotation => @Cacheable(value = "nameOfCache", keyGenerator = "objectKeyMethodParamsGenerator")
     * @return
     */
    @Bean
    public KeyGenerator objectKeyMethodParamsGenerator() {
        return (Object target, Method method, Object... params) -> {
            if( null != params ) {
                return method.getName() + "_" + Arrays.toString(params);
            } else  {
                return  target.getClass().getName()+"_"+method.getName() + "_";
            }
        };
    }
}
