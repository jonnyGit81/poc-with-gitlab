<!-- https://springframework.guru/using-ehcache-3-in-spring-boot/ -->
<config
        xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
        xmlns='http://www.ehcache.org/v3'
        xsi:schemaLocation="
            http://www.ehcache.org/v3
            http://www.ehcache.org/schema/ehcache-core-3.7.xsd">

    <!-- Persistent cache directory -->
    <!-- In the persistence tag, we define the directory for a file-based cache on the hard disk (disk store).
         This is only the definition of the folder.
         Whether we really want to use a disk store or not will be configured later.
    -->
    <persistence directory="com-poc-cache/cache" />

    <!--
    In the expiry tag, we define a time to live (ttl) of 30 seconds.
    The time to live specifies how long a cache entry may remain in the cache independently of access.
    After the specified time has expired, the value is removed from the cache.
    It is alsdaso possible to define a time to idle (tti).

    The time to idle specifies how long the cache entry may exist in the cache without access.
    For example, if a value is not requested for more than 30 seconds, it is removed from the cache.
    -->
    <!-- Default cache template -->
    <cache-template name="default-24-hours">
        <expiry>
            <ttl unit="seconds">86400</ttl> <!-- change it to 24 hour -->
        </expiry>

        <!--
        In the listeners tag, we configure a CacheEventListener. The listener reacts to the following events:
        - A cache entry is placed in the cache (CREATED).
        - The validity of a cache entry has expired (EXPIRED).
        - A cache entry is evicted from the cache (EVICTED).

        The specified CacheLogger class only logs the occurred cache event on the console:
        {@see CacheLogger.java}

        In the resources tag,
        we configure the tiers and capacities of our cache.
        We use a three-tier cache with a disk store as authority tier:

        - heap: For the on heap store we configure a capacity of 1,000 cache entries.
          This is the maximum number of entries before eviction starts.

        - offheap: For the off-heap store we configure a capacity of 10 MB.

        - disk: As disk cache, we configure 20 MB.
          Important: The disk cache must always have a higher memory capacity than the heap cache,
          otherwise the application throws an exception during application startup when parsing the XML file.

          Ehcache uses Last Recently Used (LRU) as the default eviction strategy for the memory stores.
          The eviction strategy determines which cache entry is to be evicted when the cache is full.
          The cache entries are always evicted to the next lower tier, for example, from the on-heap store to the off-heap store.

          If a disk store is used and this is full,
          another cache entry is removed when a cache entry is added.
          The disk store uses Last Frequently Used (LFU) as the eviction strategy.
        -->
        <listeners>
            <listener>
                <class>com.poc.cache.CacheLogger</class>
                <event-firing-mode>ASYNCHRONOUS</event-firing-mode>
                <event-ordering-mode>UNORDERED</event-ordering-mode>
                <events-to-fire-on>CREATED</events-to-fire-on>
                <events-to-fire-on>EXPIRED</events-to-fire-on>
                <events-to-fire-on>EVICTED</events-to-fire-on>
            </listener>
        </listeners>
        <resources>
            <heap>1000</heap>
            <offheap unit="MB">10</offheap>
            <disk persistent="true" unit="MB">20</disk>
        </resources>
    </cache-template>


    <!-- Cache configuration -->
    <!-- Using the cache template we just created, we can now configure our cache.
         Thanks to the template we only have to define a name (alias) as well as the type of the cache key (key-type)
         and the type of the cached value (value-type):

    I would like to point out that we could have configured the cache without the cache template.
    All settings made in the cache-template tag can also be used directly within the cache tag.

    Note: If the cache key consists of more than one method parameter,
    the type java.util.ArrayList must be used as the key-type.

    Wiring of ehcache.xml with application.properties
    Finally, we tell the application.properties file where our configuration file for Ehcache is located:

    spring.cache.jcache.config=classpath:ehcache.xml
    -->
    <cache alias="userGrantedPagesCache" uses-template="default-24-hours">
        <key-type>java.lang.Long</key-type>
        <value-type>java.lang.Object</value-type>
    </cache>
</config>
